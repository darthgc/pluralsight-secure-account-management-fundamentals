-------------------------------
Introduction
-------------------------------

Why we need this course?
	There is more and bigger security risks

-------------------------------
Fundamental Security Concepts
-------------------------------

The 3 objectives of HTTPS
	Authenticity
		Confident that you are on the right website (valid certificate (CA))
	Integrity
		Confidence that the information that we send and received has not been manipulated (by a MiTM)
	Confidentiality
		Confidence that nobody has been able to read sent/received data

	The first 2 often gets neglected (ex: login form is not loaded over https)

Brute force attacks
	How frequently do the website allow login attempt?

Account enumeration attacks
	Dev. do not consider this often

	The website disclose if the account exists or not

	This is a privacy risk (do someone use a specific bank? Could be usefull for fishing)

Understanding CSRF
	attacker sends a malicious link (fishing scam, email, social media, invalidated redirect) -> user click -> go to the hacker's website -> the hacker's website send a constructed request to the target website to perform some action on it (usually, the user must be logged to the target website)

	Ex: change psw

Event logging
	Important to reconstruct what went wrong and where to take action

	What to log?
		Who performed the action
		What action was performed? On what resource? (url, function name, ...)
		When the action was performed? (gives also chronolgy)
		From where? (IP address (yes they can obfuscate it: VPN, tor, ...))
		With what? (browser, user agent, ... (can be obfuscated))
		Via where? (what path did the person take to get to the path, usefull for CSRF (was there an attaker site involved?))

Summary
	HTTPS everything
	Brute force comes in many shapes
	Log everything, as long as you can!

-------------------------------
Password storage
-------------------------------

Overview
	This is often the last line of defense in the system
	There are many ways of storing them
		and many of them are useless
	Passwords are significant personal info
		People re-use them

The importance of password storage
	Passwords may be exfiltrated (SQL injection)
	Operators may access passwords
	Passwords "at rest" (backed up) may be disclosed

What is wrong with plain text storage?
	Once the passwords are disclosed, it is game over
	It contravenes many compliance standards
	Stronger passwords offer no further cryptographic protection
	If disclosed, what other systems does it compromise for the user?

What is wrong with encryption?
	Because it can be decrypted
		When attacker owns the environment, he can obtain the private key

		It just move the problem to how the keys are stored

Cryptographically strong password hashing
	We store the hash of the psw.

	Hashes are deterministic.

	Hashes (of specific algo) always have the same length, so it does not disclose password caracteristics

	If the hashes gets disclosed, then it is a big issue, since it is deterministic

	Hashing with a salt
		plain text psw -> add salt (a bunch of random bits) -> hashing algo -> hash & salt
		even if the psw hash has been disclosed, then you are "ok"

		Not all hashing algo are equal, some are really weak. There are hash breaker that computes billions of hashes per second. All you have to do is compute plain text passwords with the hashing algo and the salt, and compare the hash result for the associated hash.


	OWASP password storage cheat sheet:
		How to impose infeasible verification on the attacker
		Make the workload of computing hashes to high for the attacker

Leveraging native password storage functions
	Never roll your own hashing algo
	Encode != crypto
	Most frameworks have built-in implementations

Summary
	Respect the passwords you are protecting
	Get hashing right
		but many algo are weak
	Leverage what is out there already

-------------------------------
Registration
-------------------------------

Overview
	It is easy to build the feature insecurely
	There are many edge cases
	Registration forms are frequently a target of online attacks

Using email adresses as usernames
	pros and cons of email as username
		Easier to remember
		One less field to capture at signup
		It is already unique per user
			Except when it is not unique per user
		Must be able to change in the future
	pros and cons of free text for username
		Can be displayed to users with less privacy risk
			Discussion boards or whatever
		Enables multiple accounts against one email
			but makes password resets hard
				so we make sure the email adress does not already exists in the system
		Requires a "retrieve my username" feature

Password strength criteria
	You must set minimal number of characters
		But this is not enough

	You must not reject "special" characters

	Password complexity matters
		4 digit number: 10 000 combinations
		4 character lowercase alpha: 456 976 combinations
		4 character mixed alphanumeric: 14 776 336 combinations

Providing user feedback on password strength

More sophisticated password implementation
	Calculate the strength server side
		Still works even if JS disbladed
		Can check against common weak passwords (like password)
			Just compare it against leaked passwords dictionnary(ies)

Disabling paste on password fields
	Why do that?
		A compagny that do not do that could lose its security certificate

Verifying accounts via email
	The only way to know if the email address is correct, just send a validation address to the user via the email address

	Otherwise, it could lead to SPAM and other

	On validating, the user will follow a link with a valid id (a unique token for each user)

Protecting against account enumeration
	Need to send the same UI message to the user if the account already exists or not

Using CAPTCHA for anti-automation
	Attacker could intercept/reconstruct the inscription request that sends an email, and automate that call.

	If many of your emails are marked as SPAM, then you are more likely to be blocked and blacklisted

	Do your website allow an attacker to send the email as much as he wants?

	CAPTCHA almost eradicate automation
		But it is not perfect, there are exploits:
			- Human captcha crackers
				- but you have to pay the humans.. but it is very effective

Summary
	Help your users create strong passwords
	Consider the need for email verification
	Protect their identities from enumeration
	Protect your system from bulk signups and spam reputation damage

-------------------------------
Logon
-------------------------------

Logons are one of the most abused features of account management
They often do not protect against enumeration and brute force
Identity persistence is often implemented poorly

Logon failures and enumeration risks
	Do not disclose account existance

Protecting against brute force
	IP blocking is not nessessary a good mitigation: bot net could jump to other IP adresses from infected machines around the world

	For protecting:
		Do
			Degrade the service (gradually wait more between log fails) (but log right when the credentials are good)
			Log everything			
		Don't
			Lock an account out (risk of DoS)
			Restrict logon by IP (infected machines, VPN, tor, ...)
			Limit attempts with a cookie (the attackers just won't send the cookie)

Persisting auth sessions
	Understanding auth persistence
		User sends logon -> auth token is returned

		Every other request has the auth token in it

		Auth tokens must be cryptographic
			And also HTTP only and secure flag on (and the website over https)

Multiple simultaneous sessions from the same user
	Most login do not restrict this server side.

	This is part of the nature of the site (fb vs banks)

	What to do to prevent simultaneous logon?
		Centrally tracking logon state
			Logon state tracking server side

	Approaches to simultaneous logons
		Disallow the logon
		Log the other session out automatically

		You have to be able to log other session out
			What happen when the other session have unsaved data?

		There is a lot of edge cases

Fraud detection and prevention
	Logging
		Time (UTC, saves a lot of pain if you move your app), Thread, Level, Logger (where it has been sent from), Message, IP, Headers (language, cookies, referer (where they came from), user agent (browser + version) (it will disclose if it is the googlebot, a user, or something else..))

	Ex: Linkedin: block you if you login from different computer, and send a confirm email. Facebook: Sends an email if connection in other country.

	Github: you can see all conected account and disconnect the ones you do not recognise. Also some history

Employing 2 factor authentication (2FA)
	user logon -> sever asks a request token (SMS, an auth app) -> user provide the token

	You do not have to build the thing from scratch (ex: MS Azure is built-in, it is easy to include that in your app.)

Summary
	Logons are frequently attacked
	You must expect brute force attacks
	Be cautious with auth persistence
	Simultaneous sessions can be tricky
	Consider the role of 2FA

-------------------------------
Remmember Me
-------------------------------

A very simple feature frequently built insecurely

It is a feature which requires trade-offs: security vs usability

There are many precedents of bad implementations

Is remember me a good feature to build?
	Reduces the friction of return visits
	It allows long-running sessions

	It increases numerous risks
		Someone else using the pc
		A CSRF risk being exploited (this is the most probable)

How not to build a remember me feature
	Remember me cookie encoded ...
		They are sent around, since it is a cookie

Implementing long-expiring cookies
	Change the expiration of the AuthCookie .. that is it!

Additional security controls
	2 seperate controls
		Save the user id for a long time
		AuthCookie do not live very long

	You keep personnalisation but you are secure(r)

Summary
	There is a discussion to be had around usability vs security
	Never ok to store credentials in cookies in clear text
	Session expiration of the auth token is the key

-------------------------------
Account Details Change
-------------------------------

Why attackers change account details
	To gain access to personally identifiable info, interactions with other individuals

	Gain control of the target's account
		Send email
		Make purchases
		Hold them to ransom

How attakers change account details
	Direct browser access (sit down at the PC)
	Credential theft
	CSRF
	Session hijacking (authtoken sent insecurly, authtoken in url and it is shared)
	Social engineering

Account attributes attackers want to change
	Password
	Email (can be changed to block the user the ability to reset his password)
	Identity
	Credit card

Verifying the current password
	This is important to enter the current password in order to reset a password (even if the user is logged in, it protects against CSRF)
	This also increase the risk of a CSRF attack

Account change notification
	If the attacker already have the legtimate password.

	Must send an email for account changes.

	It is harder to intercept an SMS than an email (choose SMS when possible)

	What would happen if the attacker changes the email?
		there is a way to mitigate that risk: Cannot change email address without confirmation in the original address itself

Confirming email changes via email
	GUID -> global unique identifier

Summary
	There are many account attributes that are attractive to attackers
	And there are many attack vectors available to control them
	Identity verification is the key defense
	
-------------------------------
Password reset
-------------------------------